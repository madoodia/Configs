# Usefull commands in CentOS7 learning

# =========================
$ cp -r <folder> <destination>

# =========================

intall git 2.x
install from this:

$ sudo yum remove git*
$ sudo wget https://github.com/git/git/archive/v2.25.0.tar.gz
$ cd git
$ autoconf
$ ./configure
$ sudo make
$ sudo make install


$ git --version

# (/home/[USER]/.gitconfig)
$ git config --global user.name "Your Name"
$ git config --global user.email "user@domain.com"
$ 

# =========================
- Create ssh keygen: (/home/[USER]/.ssh/id_rsa.pub)
$ ssh-keygen -o
then copy it in github.com and create new ssh key

# =========================
# =========================
- install skype (or use flatpak/flathub)

Insatall extensions in centos7, 8
https://www.2daygeek.com/how-to-install-and-configure-gnome-shell-extensions-in-linux/

$ sudo flatpak install -y --from https://flathub.org/repo/appstream/com.skype.Client.flatpakref
$ flatpak run com.skype.Client


# =========================

# =========================
- find and install all updates for softwares
$ sudo yum update

# =========================
- restart system
$ sudo reboot

-shutdown system
$ sudo poweroff

# =========================
- install Appimage formats
1. download file
2. make it executable
$ chmod u+x <AppImage File>
3. run to install

# =========================
$ lspci -v
$ lspci -vnn
$ lspci -vnn | grep VGA

remove an rpm package
$ sudo rpm -e <package name>

Download a package
$ wget http://....zip

unpack a tar.gz file
$ tar -xvf file.tar.gz

$ sudo yum install unzip
$ sudo yum install zip

$ unzip /path/to/file.zip -d /destination

Disable/enable gnome gui
$ systemctl disable gdm
$ systemctl enable gdm

using root user:
$ sudo su
or
$ su -

# =========================
- Create symlink from a file in current directory
$ ln -sf /path/to/a/file

- Remove a symlink
$ unlink /path/to/symlink_name

Finding count of file in a directory$ find . -type f -print | wc -l

Finding a string in all files of a path
$ grep "redeem reward" /home/tom/*.txt
$ grep -r "redeem reward" /home/tom/

CPU Usage:
$ htop

remove files
$ sudo rm -rf /path/file

# =========================
- Update GCC
$ sudo yum -y update
$ sudo yum -y install bzip2 wget gcc gcc-c++ gmp-devel mpfr-devel libmpc-devel make
$ sudo git clone git://gcc.gnu.org/git/gcc.git 
$ cd gcc
$ sudo mkdir build
$ sudo cd build
$ sudo ../configure --enable-languages=c,c++ --disable-multilib
$ sudo make -j$(nproc)
$ sudo make install
$ gcc --version

For uninstall
$ cd build/gcc
$ sudo make uninstall

# or install gcc version 6 or 7 by devtoolset
$ sudo yum -y install centos-release-scl
$ sudo yum -y install devtoolset-6

# =========================
install llvm/clang
https://clang.llvm.org/get_started.html
# =========================
Install make
download make from http://ftp.gnu.org/gnu/make/
$ cd make*
$ ./configure
$ make
$ sudo make install

add /usr/local/bin to $PATH
# =========================
Getting size of each folder
$ sudo du -shc /var/*

# =========================
Install qt on centos7
- Download qt from https://download.qt.io or https://www.qt.io/download-open-source
$ sudo chmod +x qt-opensource-linux-x64-5.14.1.run
$ sudo ./qt-opensource-linux-x64-5.14.1.run

- add theses lines to .bashrc:
export PATH=/mnt/hdd/madoodia/softwares/Qt5.14.1/Tools/QtCreator/bin:$PATH
export PATH=/mnt/hdd/madoodia/softwares/Qt5.14.1/5.14.1/gcc_64/bin:$PATH

# Run this: (for fixing qtcreator bug)
# Warning: Unable to determine gdb target ABI
$ ldd /mnt/hdd/madoodia/softwares/Qt5.14.1/5.14.1/gcc_64/plugins/platforms/libqxcb.so
# =========================
CUDA Toolkit 10.1 original for Lenovo Laptop
$ cd ~/Downloads
$ wget http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda-repo-rhel7-10-1-local-10.1.243-418.87.00-1.0-1.x86_64.rpm
$ sudo rpm -i cuda-repo-rhel7-10-1-local-10.1.243-418.87.00-1.0-1.x86_64.rpm
$ sudo yum clean all
$ sudo yum -y install cuda

After installation
- add theses lines to .bashrc:
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
run:
$ source ~/.bashrc
$ nvcc --version

- Install CUDA samples and further tests by compiling CUDA programs in the 'cuda-samples'
$ cd samples/0_Simple/simpleCallback
$ make
$ cd ../../bin/x86_64/linux/release
$ ./simpleCallback 
Starting simpleCallback
Found 1 CUDA capable GPUs
GPU[0] GeForce GTX 660M supports SM 3.0, capable GPU Callback Functions
1 GPUs available to run Callback Functions
Starting 8 heterogeneous computing workloads
Total of 8 workloads finished:
Success


# =========================
For creating SDKS_LOCATION:
First install your libraries or softwares like Qt5 or cuda
then create symlink from them in your sdks path
then use you sdks path in your build system

# =========================
Install Houdini
- Download houdini: https://www.sidefx.com/download/

$ tar xvf houdini...tar.gz

- Setup Environment Variables
$ cd /opt/hfs18.0
$ source houdini_setup

To get Server Information: https://www.sidefx.com/services/non-commercial-license/
$ sesictrl -n

Run License Administrator to enter licenses
Manually enter keys
# =========================


# =========================
# VSCode Installation 
https://code.visualstudio.com/docs/setup/linux
$ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
$ sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
$sudo yum check-update
$ sudo yum install code

# Maya Instalation
- Maya needs some dependencies
- https://knowledge.autodesk.com/support/maya/troubleshooting/caas/CloudHelp/cloudhelp/2019/ENU/Installation-Maya/files/GUID-D2B5433C-E0D2-421B-9BD8-24FED217FD7F-htm.html

# My way on centos8
$ sudo yum install mesa-libGLw
$ sudo yum install mesa-libGLU
$ sudo yum install libXp
$ sudo yum install gamin audiofile audiofile-devel e2fsprogs-libs

$ sudo yum install audiofile audiofile-devel libtiff e2fsprogs-libs gamin liberation-fonts-common liberation-mono-fonts liberation-sans-fonts liberation-serif-fonts libICE libSM libvdpau libXau libxcb libX11 libXinerama libXinerama-devel libXext libXi libXmu libXcursor libXcursor-devel libXmu-devel libXp libXpm libXt libXv mesa-libGLw SDL tcsh xorg-x11-fonts-ISO8859-1-100dpi xorg-x11-fonts-ISO8859-1-75dpi zlib

unzip maya2019.2.zip
unzip maya2019.C.zip

$ sudo yum install libpng12.x86_64

$ cd maya2019.2

$ sudo ./setup

after installation Follow maya2019.C_d


# =========================
Install CMake
-> Build from source (needs to have mesa-libGLU.x86_64 mesa-libGL.x86_64 mesa-libGLU-devel.x86_64 )
Download Latest version of CMake from : https://cmake.org/download/
$ tar -zxvf cmake-*.tar.gz
$ cd cmake-*
$ ./bootstrap
$ sudo make
$ sudo make install

-> install binary
Download Latest version of CMake from : https://cmake.org/download/
$ tar -zxvf cmake-*.tar.gz
$ cd cmake-*
copy all files in bin and put in /usr/local/bin
# =========================
Get Machine's IP:
$ curl ifconfig.me

==================================================
CMake in Linux
Example:
Building googleTest:
$ git clone clone googletest:
$ cd googletest
$ mkdir build
$ cd build
$ cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
$ sudo make
copy include sample src scripts build/lib of googletest and googlemock to sdks folder
==================================================
Install HDF5:
Download from: https://www.hdfgroup.org/downloads/hdf5/source-code/
$ tar zxvf hdf5*.tar.gz
$ cd hdf5*
$ ./configure --prefix=/mnt/hdd/madoodia/sdks/HDF5
$ make
$ make install
==================================================
install OpenEXR
git clone git@github.com:AcademySoftwareFoundation/openexr.git

$ cd $source_directory/IlmBase
$ ./bootstrap
$ ./configure --prefix=/mnt/hdd/madoodia/sdks/OpenEXR/IlmBase
$ make
$ make install

$ cd $source_directory/OpenEXR
$ ./bootstrap
$ ./configure --prefix=/mnt/hdd/madoodia/sdks/OpenEXR/OpenEXR --with-ilmbase-prefix=/mnt/hdd/madoodia/sdks/OpenEXR/IlmBase
$ make 
$ make install

$ cd $source_directory/PyIlmBase
$ ./bootstrap
$ ./configure --prefix=/mnt/hdd/madoodia/sdks/OpenEXR/PyIlmBase --with-ilmbase-prefix=/mnt/hdd/madoodia/sdks/OpenEXR/IlmBase --disable-ilmbasetest --disable-boostpythontest
$ make 
$ make install
- Run ./configure --help for a complete set of configuration options.
==================================================
install doxygen:
$ git clone https://github.com/doxygen/doxygen.git
$ cd doxygen
$ mkdir build
$ cd build
$ cmake -G "Unix Makefiles" ..
$ sudo make
$ sudo make install
==================================================
install boost
download : https://www.boost.org/users/download/
$ cd path/to/boost_1_61_0
$ ./bootstrap.sh --help
$ ./bootstrap.sh --prefix=path/to/installation/prefix
$ ./b2 install
==================================================
install Alembic
git clone git@github.com:alembic/alembic.git
==================================================
IMPORTANT NOTES:
Default include path in linux:
/usr/include
Default lib path (32bit)
/usr/lib
Default lib64 path (64bit)
/usr/lib64
Default bin path
/usr/bin
==================================================
find a folder in root:
$ cd /
$ sudo find -type d -name '*devtoolset-6*'
==================================================
install KDAB GammaRay
$ git clone git@github.com:KDAB/GammaRay.git
$ cd GammaRay
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/your/path/softwares -DCMAKE_PREFIX_PATH=/your/sdks/Qt5 ..
$ make
$ make install
$ ./path/to/GammaRay/bin/gammaray