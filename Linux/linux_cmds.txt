# Usefull commands in CentOS7 learning


# update centos without updating kernel
yum update --exclude=kernel*


# =========================
$ cp -r <folder> <destination>

# =========================

intall git 2.x
install from this:

$ sudo yum remove git*
$ sudo wget https://github.com/git/git/archive/v2.25.0.tar.gz
$ cd git
$ autoconf
$ ./configure
$ sudo make
$ sudo make install


$ git --version

# (/home/[USER]/.gitconfig)
$ git config --global user.name "Your Name"
$ git config --global user.email "user@domain.com"
$ 

# =========================
- Create ssh keygen: (/home/[USER]/.ssh/id_rsa.pub)
$ ssh-keygen -o
then copy it in github.com and create new ssh key

# =========================
# =========================
- install skype (or use flatpak/flathub)

Insatall extensions in centos7, 8
https://www.2daygeek.com/how-to-install-and-configure-gnome-shell-extensions-in-linux/

$ sudo flatpak install -y --from https://flathub.org/repo/appstream/com.skype.Client.flatpakref
$ flatpak run com.skype.Client


# =========================

# =========================
- find and install all updates for softwares
$ sudo yum update

# =========================
- restart system
$ sudo reboot

-shutdown system
$ sudo poweroff

# =========================
- install Appimage formats
1. download file
2. make it executable
$ chmod u+x <AppImage File>
3. run to install

# =========================
$ lspci -v
$ lspci -vnn
$ lspci -vnn | grep VGA

remove an rpm package
$ sudo rpm -e <package name>

Download a package
$ wget http://....zip

unpack a tar.gz file
$ tar -xvf file.tar.gz

$ sudo yum install unzip
$ sudo yum install zip

$ unzip /path/to/file.zip -d /destination

Disable/enable gnome gui
$ systemctl disable gdm
$ systemctl enable gdm

using root user:
$ sudo su
or
$ su -

# =========================
- Create symlink from a file in current directory
$ ln -sf /path/to/a/file

- Remove a symlink
$ unlink /path/to/symlink_name

Finding count of file in a directory$ find . -type f -print | wc -l

Finding a string in all files of a path
$ grep "redeem reward" /home/tom/*.txt
$ grep -r "redeem reward" /home/tom/

CPU Usage:
$ htop

remove files
$ sudo rm -rf /path/file

# =========================
- Update GCC
$ sudo yum -y update
$ sudo yum -y install bzip2 wget gcc gcc-c++ gmp-devel mpfr-devel libmpc-devel make
$ sudo git clone git://gcc.gnu.org/git/gcc.git 
$ cd gcc
$ sudo mkdir build
$ sudo cd build
$ sudo ../configure --enable-languages=c,c++ --disable-multilib
$ sudo make -j$(nproc)
$ sudo make install
$ gcc --version

For uninstall
$ cd build/gcc
$ sudo make uninstall

# or install gcc version 6 or 7 by devtoolset
$ sudo yum -y install centos-release-scl
$ sudo yum -y install devtoolset-6

# =========================
install llvm/clang
https://clang.llvm.org/get_started.html
# =========================
Install make
download make from http://ftp.gnu.org/gnu/make/
$ cd make*
$ ./configure
$ make
$ sudo make install

add /usr/local/bin to $PATH
# =========================
Getting size of each folder
$ sudo du -shc /var/*

# =========================
Install qt on centos7
- Download qt from https://download.qt.io or https://www.qt.io/download-open-source
$ sudo chmod +x qt-opensource-linux-x64-5.14.1.run
$ sudo ./qt-opensource-linux-x64-5.14.1.run

- add theses lines to .bashrc:
export PATH=/mnt/hdd/madoodia/softwares/Qt5.14.1/Tools/QtCreator/bin:$PATH
export PATH=/mnt/hdd/madoodia/softwares/Qt5.14.1/5.14.1/gcc_64/bin:$PATH

# Run this: (for fixing qtcreator bug)
# Warning: Unable to determine gdb target ABI
$ ldd /mnt/hdd/madoodia/softwares/Qt/5.15.1/gcc_64/plugins/platforms/libqxcb.so
# =========================
CUDA Toolkit 10.1 original for Lenovo Laptop
$ cd ~/Downloads
$ wget http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda-repo-rhel7-10-1-local-10.1.243-418.87.00-1.0-1.x86_64.rpm
$ sudo rpm -i cuda-repo-rhel7-10-1-local-10.1.243-418.87.00-1.0-1.x86_64.rpm
$ sudo yum clean all
$ sudo yum -y install cuda

After installation
- add theses lines to .bashrc:
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
run:
$ source ~/.bashrc
$ nvcc --version

- Install CUDA samples and further tests by compiling CUDA programs in the 'cuda-samples'
$ cd samples/0_Simple/simpleCallback
$ make
$ cd ../../bin/x86_64/linux/release
$ ./simpleCallback 
Starting simpleCallback
Found 1 CUDA capable GPUs
GPU[0] GeForce GTX 660M supports SM 3.0, capable GPU Callback Functions
1 GPUs available to run Callback Functions
Starting 8 heterogeneous computing workloads
Total of 8 workloads finished:
Success


# =========================
For creating SDKS_LOCATION:
First install your libraries or softwares like Qt5 or cuda
then create symlink from them in your sdks path
then use you sdks path in your build system

# =========================
Install Houdini
- Download houdini: https://www.sidefx.com/download/

$ tar xvf houdini...tar.gz

- Setup Environment Variables
$ cd /opt/hfs18.0
$ source houdini_setup

To get Server Information: https://www.sidefx.com/services/non-commercial-license/
$ sesictrl -n

Run License Administrator to enter licenses
Manually enter keys
# =========================


# =========================
# VSCode Installation 
https://code.visualstudio.com/docs/setup/linux
$ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
$ sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
$sudo yum check-update
$ sudo yum install code

# Maya Instalation
- Maya needs some dependencies
- https://knowledge.autodesk.com/support/maya/troubleshooting/caas/CloudHelp/cloudhelp/2019/ENU/Installation-Maya/files/GUID-D2B5433C-E0D2-421B-9BD8-24FED217FD7F-htm.html

# My way on centos8
$ sudo yum install mesa-libGLw
$ sudo yum install mesa-libGLU
$ sudo yum install libXp
$ sudo yum install gamin audiofile audiofile-devel e2fsprogs-libs

$ sudo yum install audiofile audiofile-devel libtiff e2fsprogs-libs gamin liberation-fonts-common liberation-mono-fonts liberation-sans-fonts liberation-serif-fonts libICE libSM libvdpau libXau libxcb libX11 libXinerama libXinerama-devel libXext libXi libXmu libXcursor libXcursor-devel libXmu-devel libXp libXpm libXt libXv mesa-libGLw SDL tcsh xorg-x11-fonts-ISO8859-1-100dpi xorg-x11-fonts-ISO8859-1-75dpi zlib

unzip maya2019.2.zip
unzip maya2019.C.zip

$ sudo yum install libpng12.x86_64

$ cd maya2019.2

$ sudo ./setup

after installation Follow maya2019.C_d


# =========================
# if cmake needs openssl do this
sudo yum group install 'Development Tools'
sudo yum install perl-core zlib-devel -y
cd /usr/local/src/
sudo wget https://www.openssl.org/source/openssl-1.1.1c.tar.gz
sudo tar -xf openssl-1.1.1c.tar.gz
cd openssl-1.1.1c
sudo ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib
sudo make
sudo make test
sudo make install
cd /etc/ld.so.conf.d/
sudo nano openssl-1.1.1c.conf

copy this into file: (ctrl+o for save / ctrl+x for exit > enter)
/usr/local/ssl/lib

sudo ldconfig -v
sudo mv /bin/openssl /bin/openssl.backup
sudo nano /etc/profile.d/openssl.sh

copy this into file:
#Set OPENSSL_PATH
OPENSSL_PATH="/usr/local/ssl/bin"
export OPENSSL_PATH
PATH=$PATH:$OPENSSL_PATH
export PATH

sudo chmod +x /etc/profile.d/openssl.sh
source /etc/profile.d/openssl.sh
echo $PATH

which openssl
openssl version -a


Install CMake
-> Build from source (needs to have mesa-libGLU.x86_64 mesa-libGL.x86_64 mesa-libGLU-devel.x86_64 )
Download Latest version of CMake from : https://cmake.org/download/
tar -zxvf cmake-*.tar.gz
cd cmake-*
# first install cmake3 with yum
cmake3 -G "Unix Makefiles" -DCMAKE_USE_OPENSSL=OFF ..
sudo make
sudo make install

-> install binary
Download Latest version of CMake from : https://cmake.org/download/
tar -zxvf cmake-*.tar.gz
cd cmake-*
copy all files in bin and put in /usr/local/bin
# =========================
Get Machine's IP:
curl ifconfig.me

==================================================
CMake in Linux
Example:
Building googleTest:
git clone clone googletest:
cd googletest
mkdir build
cd build
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
sudo make
copy include sample src scripts build/lib of googletest and googlemock to sdks folder
==================================================
Install HDF5:
Download from: https://www.hdfgroup.org/downloads/hdf5/source-code/
tar zxvf hdf5*.tar.gz
cd hdf5*
./configure
make
make install
==================================================
==================================================
install doxygen:
git clone https://github.com/doxygen/doxygen.git
cd doxygen
mkdir build
cd build
cmake -G "Unix Makefiles" ..
sudo make
sudo make install
==================================================
install boost
download : https://www.boost.org/users/download/
cd path/to/boost_1_61_0
./bootstrap.sh --help
./bootstrap.sh --prefix=path/to/installation/prefix
./b2 install
==================================================
install zlib

- download from https://zlib.net/
$ ./configure --prefix=/mnt/.../zlib
$ make
$ make install

==================================================
install Alembic
git clone git@github.com:alembic/alembic.git


cmake -G "Unix Makefiles" -DUSE_PYALEMBIC=ON -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/alembic -DILMBASE_ROOT=/mnt/hdd/madoodia/sdks/OpenEXR/IlmBase ..

cmake -G "Unix Makefiles" -DUSE_EXAMPLES=ON -DUSE_PYALEMBIC=ON -DUSE_HDF5=ON -DHDF_ROOT=/mnt/hdd/madoodia/sdks/HDF5 -DALEMBIC_LIB_USES_BOOST=ON -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/alembic -DILMBASE_ROOT=/mnt/hdd/madoodia/sdks/OpenEXR/IlmBase -DBOOST_ROOT=/mnt/hdd/madoodia/sdks/boost -DBoost_INCLUDE_DIR=/mnt/hdd/madoodia/sdks/boost/include -DBoost_LIBRARY_DIRS=/mnt/hdd/madoodia/sdks/boost/lib -DZLIB_INCLUDE_DIR=/mnt/hdd/madoodia/sdks/zlib/include -DZLIB_LIBRARY=/mnt/hdd/madoodia/sdks/zlib/lib ..

==================================================
IMPORTANT NOTES:
Default include path in linux:
/usr/include
Default lib path (32bit)
/usr/lib
Default lib64 path (64bit)
/usr/lib64
Default bin path
/usr/bin
==================================================
find a folder in root:
$ cd /
$ sudo find -type d -name '*devtoolset-6*'
==================================================
install KDAB GammaRay
$ git clone git@github.com:KDAB/GammaRay.git
$ cd GammaRay
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/your/path/softwares -DCMAKE_PREFIX_PATH=/your/sdks/Qt5 ..
$ make
$ make install
$ ./path/to/GammaRay/bin/gammaray

or build in QtCreator


-----------------------------------------------
Qt Tips
Error: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found
$ strings /lib64/libstdc++.so.6 | grep GLIBCXX
Solution:
export LD_LIBRARY_PATH=/mnt/hdd/madoodia/softwares/Qt/5.15.1/gcc_64/lib:/usr/local/lib:/usr/lib:/usr/local/lib64:/usr/lib64:$LD_LIBRARY_PATH

======
Export/Import QtCreator Settings:
QtCreator Configs are in this path:
/home/<USER>/.config/QtProject

so for keeping Settings in some place copy it to your custom path
$ cp -r /home/<USER>/.config/QtProject /your/path

Coding Style is in:
/home/<USER>/.config/QtProject/styles/creator-FILENAME.XML

And Shortcuts are here:
/home/<USER>/.config/QtProject/QtCreator.ini

Add .clang-format to QtCreator (https://www.vikingsoftware.com/using-clang-format-with-qtcreator/)
1. Help > About Plugin > Enable Beautifier
2. Restart QtCreator
3. Tools > Options > Beautifier > Clang Format:
    - Set Clang Format Command to your clang-format executable file
    - I personally used my VSCODE's C++ extensions' clang-format bundled in this path:
        /home/reza/.vscode/extensions/ms-vscode.cpptools-1.0.1/LLVM/bin/clang-format
4. Tools > Options > Beautifier > Clang Format:
    - put "Use Predefined Style" on File
5. Tools > Options > Beautifier > General:
    - Enable Auto Format on file save
    - Tool: ClangFormat
6. Create this file inside project
.clang-format

with this content for start: (you can change it based on clang-format features in its website)
BasedOnStyle: LLVM
UseTab: Never
IndentWidth: 2
TabWidth: 4
BreakBeforeBraces: Allman
AllowShortIfStatementsOnASingleLine: false
IndentCaseLabels: false
ColumnLimit: 0
AccessModifierOffset: -2

7. Tools > Options > Environment > Keyboard:
    - search for FormatAtCursor
    - set Ctrl+Alt+F (or whatever you like) for apply formatting with keyboard


---------------------------------------------
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
BUILDING OpenShadingLanguage (OSL)



# llvm -----------------------------------------------------------
git clone git@github.com:llvm/llvm-project.git llvm9.x
cd llvm9.x
git checkout release/9.x --force

mkdir build
cd build

cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$SDKS_LOCATION/llvm9x -DCMAKE_BUILD_TYPE=Release -j 16 ../llvm

make

sudo make install

cd..
mkdir build_clang
cd build_clang

clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$SDKS_LOCATION/llvm9x/tools/clang -DCMAKE_PREFIX_PATH=$SDKS_LOCATION/llvm9x -DCMAKE_BUILD_TYPE=Release -j 16 ../clang


make

sudo make install



# BOOST -----------------------------------------------------------
wget https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz
tar -xzf boost_1_*
cd boost_1_*
./bootstrap.sh 
./b2 install --with-atomic --with-chrono --with-container --with-context --with-contract --with-coroutine --with-date_time --with-exception --with-fiber --with-filesystem --with-graph --with-graph_parallel --with-iostreams --with-locale --with-log --with-math --with-mpi --with-program_options --with-python --with-random --with-regex --with-serialization --with-stacktrace --with-system --with-test --with-thread --with-timer --with-type_erasure --with-wave


# libtiff -----------------------------------------------------------
git clone git@gitlab.com:libtiff/libtiff.git
cd libtiff
git checkout v4.1.0 --force


clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$SDKS_LOCATION/libtiff -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-O3 -Wno-unused-function -Wno-deprecated-declarations -Wno-cast-qual -Wno-write-strings" ..

cmake --build . --config Release --target install


# python37 -----------------------------------------------------------
wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz
tar xzf Python-3.7.9.tgz
cd Python-3.7.9
./configure --enable-optimizations
make altinstall

# libraw -----------------------------------------------------------
wget https://www.libraw.org/data/LibRaw-0.20.2.tar.gz
tar xzvf LibRaw-0.20.2.tar.gz
cd LibRaw-0.20.2
autoreconf --install
./configure
make
sudo make install

# pugixml -----------------------------------------------------------
git clone git@github.com:zeux/pugixml.git
cd pugixml
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/pugixml -DCMAKE_BUILD_TYPE=Release ..
make
sudo make install


# libjpeg -----------------------------------------------------------
git clone git@github.com:libjpeg-turbo/libjpeg-turbo.git
cd libjpeg-turbo
mkdir build
cd build



clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..


make
sudo make install


# NASM -----------------------------------------------------------
wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.gz
tar xzvf nasm-2.15.05.tar.gz
./configure
make
sudo make install

# libpng -----------------------------------------------------------
wget https://download.sourceforge.net/libpng/libpng-1.6.37.tar.gz
tar xzvf libpng-1.6.37.tar.gz
cd libpng-1.6.37
./configure
make
sudo make install

# OpenEXR - IlmBase - PyIlmBase -----------------------------------------------------------
git clone git@github.com:AcademySoftwareFoundation/openexr.git

cd openexr/IlmBase
./bootstrap
./configure
make
sudo make install

cd openexr/OpenEXR
./bootstrap
./configure
make 
sudo make install

cd openexr/PyIlmBase
./bootstrap
./configure --disable-ilmbasetest --disable-boostpythontest
make 
sudo make install


# zlib -----------------------------------------------------------
git clone git@github.com:madler/zlib.git
cd zlib
./configure --prefix=$SDKS_LOCATION/zlib
make
sudo make install





# PyBind11 -----------------------------------------------------------
git clone git@github.com:pybind/pybind11.git
cd pybind11
mkdir build
cd build

clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..

make

sudo make install

# fmt -----------------------------------------------------------
git clone git@github.com:fmtlib/fmt.git
cd fmt

mkdir build
cd build

clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -j 16 ..

make
sudo make install



# OpenCV -----------------------------------------------------------

git clone git@github.com:opencv/opencv.git

cd opencv

mkdir build
cd build

clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$SDKS_LOCATION/opencv -DCMAKE_BUILD_TYPE=Release -DSTOP_ON_WARNING=0 -j 16 ..


make

sudo make install





# OIIO -----------------------------------------------------------
git clone git@github.com:OpenImageIO/oiio.git
cd oiio

cd /mnt/hdd/madoodia/sdks/repos/oiio/src/build-scripts/
./build_libjpeg-turbo.bash
./build_libpng.bash
./build_libraw.bash
./build_libtiff.bash
./build_opencolorio.bash
./build_openexr.bash
./build_pugixml.bash
./build_pybind11.bash
./build_webp.bash
./build_zlib.bash

cd /mnt/hdd/madoodia/sdks/repos/oiio
mkdir build
cd build



cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$SDKS_LOCATION/oiio -DCMAKE_PREFIX_PATH=$SDKS_LOCATION/repos/oiio/src/build-scripts/ext/dist/ -DCMAKE_BUILD_TYPE=Release -DUSE_TBB=0 -DUSE_BZip2=0 -DUSE_Freetype=0 -DUSE_FFmpeg=0 -DUSE_GIF=0 -DUSE_FIELD3D=0 -DUSE_OPENVDB=0 -DUSE_OpenJpeg=0 -DUSE_DCMTK=0 -DUSE_Libheif=0 -DUSE_PTex=0 -DUSE_NUKE=0 -DUSE_WebP=0 -DUSE_Libsquish=0 -DOIIO_BUILD_TESTS=0 -j 16 ..



make (Failed)

sudo make install

# robin-map ---------------------------------------
git clone git@github.com:Tessil/robin-map.git
cd robin-map/tests
mkdir build
cd build
cmake ..
cmake --build .



# flex -----------------------------------------------------------
git clone git@github.com:westes/flex.git
cd flex

./autogen.sh

./configure 
make
sudo make install

or install by yum

# bison -----------------------------------------------------------
wget http://ftp.gnu.org/gnu/bison/bison-3.7.tar.gz
tar zxvf bison-3.7.tar.gz
cd bison-3.7

./configure 
make

sudo make install


# partio -----------------------------------------------------------

sudo yum install libglvnd-glx.x86_64
sudo yum install libtool
# if you get error for /usr/lib/libGLX.so
# first need to reinstall libglx

git clone git@github.com:NVIDIA/libglvnd.git
cd libglvnd

./autogen.sh
./configure
make
sudo make install

git clone git@github.com:wdas/partio.git
cd partio
mkdir build
cd build

clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/partio ..

make
sudo make install

# OSL -----------------------------------------------------------
1. let's using src/build_scripts/...

git clone git@github.com:imageworks/OpenShadingLanguage.git
cd /mnt/hdd/madoodia/sdks/repos/OpenShadingLanguage/src/build-scripts/
./build_pugixml.bash

cd /mnt/hdd/madoodia/sdks/repos/OpenShadingLanguage
mkdir build
cd build

# set for llvm9x
export PATH=/mnt/hdd/madoodia/sdks/llvm9x/tools/clang/bin/:$PATH
clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/osl -DCMAKE_PREFIX_PATH=/mnt/hdd/madoodia/sdks/repos/oiio/src/build-scripts/ext/dist:/mnt/hdd/madoodia/sdks/USD -Dpugixml_ROOT=/mnt/hdd/madoodia/sdks/repos/OpenShadingLanguage/src/build-scripts/ext/dist -DCMAKE_BUILD_TYPE=Release -Dpartio_ROOT=/mnt/hdd/madoodia/sdks/partio -DUSE_PYTHON=1 -DCMAKE_CXX_STANDARD=11 -DLLVM_ROOT=/mnt/hdd/madoodia/sdks/llvm9x -j 16 ..


:/mnt/hdd/madoodia/sdks/llvm9x:/mnt/hdd/madoodia/sdks/llvm9x/tools/clang



sudo yum remove llvm9.0.x86_64 llvm-toolset-7.0-llvm.x86_64 llvm-toolset-7.0-clang-devel.x86_64 llvm-toolset-7.0-clang-analyzer.noarch llvm-toolset-7.0-build.x86_64 llvm-toolset-7.0-llvm.x86_64 llvm-toolset-7.0-git-clang-format.x86_64 llvm-toolset-7.0-cmake.x86_64 llvm-toolset-7.0-runtime.x86_64 llvm-toolset-7.0-llvm-devel.x86_64 llvm-toolset-7.0-clang.x86_64 



cmake --build . --config Release --target install


# set for llvm-devtoolset-7.5
clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/osl -DCMAKE_PREFIX_PATH=/mnt/hdd/madoodia/sdks/repos/oiio/src/build-scripts/ext/dist:/mnt/hdd/madoodia/sdks/USD -Dpugixml_ROOT=/mnt/hdd/madoodia/sdks/repos/OpenShadingLanguage/src/build-scripts/ext/dist -DCMAKE_BUILD_TYPE=Release -Dpartio_ROOT=/mnt/hdd/madoodia/sdks/partio -DUSE_PYTHON=1 -DCMAKE_CXX_STANDARD=11 -DLLVM_ROOT=/opt/rh/llvm-toolset-7.0/ -j 16 ..


cmake --build . --config Release --target install




# for llvm 10+ with c++ 14
clear
rm -rf *
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/mnt/hdd/madoodia/sdks/osl -DCMAKE_PREFIX_PATH=/mnt/hdd/madoodia/sdks/repos/oiio/src/build-scripts/ext/dist:/mnt/hdd/madoodia/sdks/USD: -Dpugixml_ROOT=/mnt/hdd/madoodia/sdks/repos/OpenShadingLanguage/src/build-scripts/ext/dist -DCMAKE_BUILD_TYPE=Release -Dpartio_ROOT=/mnt/hdd/madoodia/sdks/partio -DUSE_PYTHON=1 -DCMAKE_CXX_STANDARD=14 -DLLVM_VERSION=7.0 -j 16 ..


cmake --build . --config Release --target install



# ---------- # experimental
### Install OSL and its dependencies through package managers ###
# linux (Centos7)
git clone git@github.com:microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh

./vcpkg/vcpkg install 
# ---------- #



=================================================================
=================================================================
=================================================================
Install Pixar USD to get OIIO from it for OSL
change OpenImageIO version of build_script to 2.2.7
sudo yum install python36-devel


git clone git@github.com:PixarAnimationStudios/USD.git
cd USD

sudo pip3 install PySide2
sudo pip3 install PyOpenGL

sudo python3.6 build_usd.py --generator "Unix Makefiles" --tests --examples --tutorials --python --usd-imaging --ptex --openvdb --usdview --materialx --openimageio --opencolorio --alembic --hdf5  $SDKS_LOCATION/USD

# Make it runnable:
export PYTHONPATH=$SDKS_LOCATION/lib/python:$PYTHONPATH
export PATH=$SDKS_LOCATION/bin:$SDKS_LOCATION/lib:$PATH

cp -r extras $SDKS_LOCATION/USD
cp -r third_party $SDKS_LOCATION/USD

# Test:
cd $SDKS_LOCATION/USD
usdview extras/usd/tutorials/convertingLayerFormats/Sphere.usda








--------------------------------------
find python site-packages in centos7
python -m site




----------------------------
